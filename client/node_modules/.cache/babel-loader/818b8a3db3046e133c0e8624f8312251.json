{"ast":null,"code":"var _jsxFileName = \"D:\\\\web\\\\git\\\\MongoDB-GraphQL-Apollo-React\\\\client\\\\src\\\\context\\\\authContext.js\",\n    _s = $RefreshSig$();\n\nimport jwtDecode from 'jwt-decode';\nimport { useReducer, createContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  user: null\n};\n\nif (localStorage.getItem('generateToken')) {\n  const decodedToken = jwtDecode(localStorage.getItem('token'));\n\n  if (decodedToken.exp * 1000 < Date.now()) {\n    localStorage.removeItem('token');\n  } else {\n    initialState.user = decodedToken;\n  }\n}\n\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null,\n  login: userData => {},\n  logout: () => {}\n});\n\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case 'LOGIN':\n      return { ...state,\n        user: action.payload\n      };\n\n    case 'LOGOUT':\n      return { ...state,\n        user: null\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction AuthProvider(props) {\n  _s();\n\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  const login = userData => {\n    localStorage.setItem('token', userData.token);\n    dispatch({\n      type: 'LOGIN',\n      payload: userData\n    });\n  };\n\n  function logout() {\n    localStorage.removeItem('token');\n    dispatch({\n      type: 'LOGOUT'\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user: state.user,\n      login,\n      logout\n    },\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 3\n  }, this);\n}\n\n_s(AuthProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["D:/web/git/MongoDB-GraphQL-Apollo-React/client/src/context/authContext.js"],"names":["jwtDecode","useReducer","createContext","initialState","user","localStorage","getItem","decodedToken","exp","Date","now","removeItem","AuthContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","dispatch","setItem","token"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,OAA1C;;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,IAAI,EAAE;AADc,CAArB;;AAIA,IAAIC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAJ,EAA2C;AACzC,QAAMC,YAAY,GAAGP,SAAS,CAACK,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAA9B;;AAEA,MAAIC,YAAY,CAACC,GAAb,GAAmB,IAAnB,GAA0BC,IAAI,CAACC,GAAL,EAA9B,EAA0C;AACxCL,IAAAA,YAAY,CAACM,UAAb,CAAwB,OAAxB;AACD,GAFD,MAEO;AACLR,IAAAA,YAAY,CAACC,IAAb,GAAoBG,YAApB;AACD;AACF;;AAED,MAAMK,WAAW,gBAAGV,aAAa,CAAC;AACjCE,EAAAA,IAAI,EAAE,IAD2B;AAEjCS,EAAAA,KAAK,EAAGC,QAAD,IAAc,CAAE,CAFU;AAGjCC,EAAAA,MAAM,EAAE,MAAM,CAAE;AAHiB,CAAD,CAAjC;;AAMA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AACnC,UAAQA,MAAM,CAACC,IAAf;AACC,SAAK,OAAL;AACC,aAAO,EACN,GAAGF,KADG;AAENb,QAAAA,IAAI,EAAEc,MAAM,CAACE;AAFP,OAAP;;AAID,SAAK,QAAL;AACC,aAAO,EACN,GAAGH,KADG;AAENb,QAAAA,IAAI,EAAE;AAFA,OAAP;;AAID;AACC,aAAOa,KAAP;AAZF;AAcA;;AAED,SAASI,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAC5B,QAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBtB,UAAU,CAACe,WAAD,EAAcb,YAAd,CAApC;;AAEA,QAAMU,KAAK,GAAIC,QAAD,IAAc;AAC3BT,IAAAA,YAAY,CAACmB,OAAb,CAAqB,OAArB,EAA8BV,QAAQ,CAACW,KAAvC;AACAF,IAAAA,QAAQ,CAAC;AACRJ,MAAAA,IAAI,EAAE,OADE;AAERC,MAAAA,OAAO,EAAEN;AAFD,KAAD,CAAR;AAIA,GAND;;AAQA,WAASC,MAAT,GAAkB;AACjBV,IAAAA,YAAY,CAACM,UAAb,CAAwB,OAAxB;AACAY,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACA;;AAED,sBACC,QAAC,WAAD,CAAa,QAAb;AACC,IAAA,KAAK,EAAE;AAAEf,MAAAA,IAAI,EAAEa,KAAK,CAACb,IAAd;AAAoBS,MAAAA,KAApB;AAA2BE,MAAAA;AAA3B,KADR;AAAA,OAEKO;AAFL;AAAA;AAAA;AAAA;AAAA,UADD;AAMA;;GAtBQD,Y;;KAAAA,Y;AAwBT,SAAST,WAAT,EAAsBS,YAAtB","sourcesContent":["import jwtDecode from 'jwt-decode';\r\nimport { useReducer, createContext } from 'react';\r\n\r\nconst initialState = {\r\n\tuser: null,\r\n};\r\n\r\nif (localStorage.getItem('generateToken')) {\r\n  const decodedToken = jwtDecode(localStorage.getItem('token'));\r\n\r\n  if (decodedToken.exp * 1000 < Date.now()) {\r\n    localStorage.removeItem('token');\r\n  } else {\r\n    initialState.user = decodedToken;\r\n  }\r\n}\r\n\r\nconst AuthContext = createContext({\r\n\tuser: null,\r\n\tlogin: (userData) => {},\r\n\tlogout: () => {},\r\n});\r\n\r\nfunction authReducer(state, action) {\r\n\tswitch (action.type) {\r\n\t\tcase 'LOGIN':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tuser: action.payload,\r\n\t\t\t};\r\n\t\tcase 'LOGOUT':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tuser: null,\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nfunction AuthProvider(props) {\r\n\tconst [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n\tconst login = (userData) => {\r\n\t\tlocalStorage.setItem('token', userData.token);\r\n\t\tdispatch({\r\n\t\t\ttype: 'LOGIN',\r\n\t\t\tpayload: userData,\r\n\t\t});\r\n\t};\r\n\r\n\tfunction logout() {\r\n\t\tlocalStorage.removeItem('token');\r\n\t\tdispatch({ type: 'LOGOUT' });\r\n\t}\r\n\r\n\treturn (\r\n\t\t<AuthContext.Provider\r\n\t\t\tvalue={{ user: state.user, login, logout }}\r\n\t\t\t{...props}\r\n\t\t/>\r\n\t);\r\n}\r\n\r\nexport { AuthContext, AuthProvider };\r\n"]},"metadata":{},"sourceType":"module"}