Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var duration = require('dayjs/plugin/duration');
var isBetween = require('dayjs/plugin/isBetween');
var isToday = require('dayjs/plugin/isToday');
var customParseFormat = require('dayjs/plugin/customParseFormat');
var localizedFormat = require('dayjs/plugin/localizedFormat');
var localeData = require('dayjs/plugin/localeData');
var dayjs = require('dayjs');
var reactTransitionGroup = require('react-transition-group');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var duration__default = /*#__PURE__*/_interopDefaultLegacy(duration);
var isBetween__default = /*#__PURE__*/_interopDefaultLegacy(isBetween);
var isToday__default = /*#__PURE__*/_interopDefaultLegacy(isToday);
var customParseFormat__default = /*#__PURE__*/_interopDefaultLegacy(customParseFormat);
var localizedFormat__default = /*#__PURE__*/_interopDefaultLegacy(localizedFormat);
var localeData__default = /*#__PURE__*/_interopDefaultLegacy(localeData);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".static{position:static}.fixed{position:fixed}.absolute{position:absolute}.relative{position:relative}.inset-0{top:0;right:0;bottom:0;left:0}.top-full{top:100%}.right-0{right:0}.right-auto{right:auto}.left-0{left:0}.left-auto{left:auto}.z-50{z-index:50}.order-last{order:9999}.mx-2{margin-left:.5rem;margin-right:.5rem}.my-1{margin-top:.25rem;margin-bottom:.25rem}.mt-0{margin-top:0}.mt-1{margin-top:.25rem}.mt-2{margin-top:.5rem}.mt-3{margin-top:.75rem}.mt-0\\.5{margin-top:.125rem}.mt-1\\.5{margin-top:.375rem}.mb-3{margin-bottom:.75rem}.block{display:block}.flex{display:flex}.inline-flex{display:inline-flex}.table{display:table}.grid{display:grid}.hidden{display:none}.h-1{height:.25rem}.h-5{height:1.25rem}.h-12{height:3rem}.w-5{width:1.25rem}.w-8{width:2rem}.w-12{width:3rem}.w-1\\/2{width:50%}.w-full{width:100%}.flex-1{flex:1 1 0%}.flex-none{flex:none}.flex-shrink-0{flex-shrink:0}.transform{--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;transform:translateX(var(--tw-translate-x)) translateY(var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.translate-y-0{--tw-translate-y:0px}.translate-y-3{--tw-translate-y:0.75rem}@-webkit-keyframes spin{to{transform:rotate(1turn)}}@keyframes spin{to{transform:rotate(1turn)}}@-webkit-keyframes ping{75%,to{transform:scale(2);opacity:0}}@keyframes ping{75%,to{transform:scale(2);opacity:0}}@-webkit-keyframes pulse{50%{opacity:.5}}@keyframes pulse{50%{opacity:.5}}@-webkit-keyframes bounce{0%,to{transform:translateY(-25%);-webkit-animation-timing-function:cubic-bezier(.8,0,1,1);animation-timing-function:cubic-bezier(.8,0,1,1)}50%{transform:none;-webkit-animation-timing-function:cubic-bezier(0,0,.2,1);animation-timing-function:cubic-bezier(0,0,.2,1)}}@keyframes bounce{0%,to{transform:translateY(-25%);-webkit-animation-timing-function:cubic-bezier(.8,0,1,1);animation-timing-function:cubic-bezier(.8,0,1,1)}50%{transform:none;-webkit-animation-timing-function:cubic-bezier(0,0,.2,1);animation-timing-function:cubic-bezier(0,0,.2,1)}}.grid-cols-2{grid-template-columns:repeat(2,minmax(0,1fr))}.grid-cols-7{grid-template-columns:repeat(7,minmax(0,1fr))}.flex-wrap{flex-wrap:wrap}.items-center{align-items:center}.justify-center{justify-content:center}.justify-between{justify-content:space-between}.gap-1{gap:.25rem}.gap-y-0{row-gap:0}.gap-y-0\\.5{row-gap:.125rem}.space-x-1>:not([hidden])~:not([hidden]){--tw-space-x-reverse:0;margin-right:calc(0.25rem*var(--tw-space-x-reverse));margin-left:calc(0.25rem*(1 - var(--tw-space-x-reverse)))}.space-x-2>:not([hidden])~:not([hidden]){--tw-space-x-reverse:0;margin-right:calc(0.5rem*var(--tw-space-x-reverse));margin-left:calc(0.5rem*(1 - var(--tw-space-x-reverse)))}.space-x-1\\.5>:not([hidden])~:not([hidden]){--tw-space-x-reverse:0;margin-right:calc(0.375rem*var(--tw-space-x-reverse));margin-left:calc(0.375rem*(1 - var(--tw-space-x-reverse)))}.overflow-hidden{overflow:hidden}.overflow-y-auto{overflow-y:auto}.whitespace-nowrap{white-space:nowrap}.rounded{border-radius:.25rem}.rounded-md{border-radius:.375rem}.rounded-xl{border-radius:.75rem}.rounded-full{border-radius:9999px}.rounded-r-full{border-top-right-radius:9999px;border-bottom-right-radius:9999px}.rounded-l-full{border-top-left-radius:9999px;border-bottom-left-radius:9999px}.border-0{border-width:0}.border{border-width:1px}.border-t{border-top-width:1px}.border-b-0{border-bottom-width:0}.border-b{border-bottom-width:1px}.border-transparent{border-color:transparent}.border-black{--tw-border-opacity:1;border-color:rgba(0,0,0,var(--tw-border-opacity))}.border-gray-200{--tw-border-opacity:1;border-color:rgba(229,231,235,var(--tw-border-opacity))}.border-litepie-secondary-300{--tw-border-opacity:1;border-color:rgba(209,213,219,var(--tw-border-opacity))}.focus\\:border-litepie-primary-300:focus{--tw-border-opacity:1;border-color:rgba(110,231,183,var(--tw-border-opacity))}.dark .dark\\:border-litepie-secondary-700{--tw-border-opacity:1;border-color:rgba(55,65,81,var(--tw-border-opacity))}.dark .dark\\:focus\\:border-litepie-primary-500:focus{--tw-border-opacity:1;border-color:rgba(16,185,129,var(--tw-border-opacity))}.border-opacity-10{--tw-border-opacity:0.1}.dark .dark\\:border-opacity-100{--tw-border-opacity:1}.bg-white{--tw-bg-opacity:1;background-color:rgba(255,255,255,var(--tw-bg-opacity))}.bg-gray-50{--tw-bg-opacity:1;background-color:rgba(249,250,251,var(--tw-bg-opacity))}.bg-litepie-primary-100{--tw-bg-opacity:1;background-color:rgba(209,250,229,var(--tw-bg-opacity))}.bg-litepie-primary-500{--tw-bg-opacity:1;background-color:rgba(16,185,129,var(--tw-bg-opacity))}.bg-litepie-primary-600{--tw-bg-opacity:1;background-color:rgba(5,150,105,var(--tw-bg-opacity))}.hover\\:bg-litepie-primary-700:hover{--tw-bg-opacity:1;background-color:rgba(4,120,87,var(--tw-bg-opacity))}.hover\\:bg-litepie-secondary-50:hover{--tw-bg-opacity:1;background-color:rgba(249,250,251,var(--tw-bg-opacity))}.hover\\:bg-litepie-secondary-100:hover{--tw-bg-opacity:1;background-color:rgba(243,244,246,var(--tw-bg-opacity))}.focus\\:bg-litepie-primary-50:focus{--tw-bg-opacity:1;background-color:rgba(236,253,245,var(--tw-bg-opacity))}.focus\\:bg-litepie-secondary-100:focus{--tw-bg-opacity:1;background-color:rgba(243,244,246,var(--tw-bg-opacity))}.dark .dark\\:bg-litepie-secondary-700{--tw-bg-opacity:1;background-color:rgba(55,65,81,var(--tw-bg-opacity))}.dark .dark\\:bg-litepie-secondary-800{--tw-bg-opacity:1;background-color:rgba(31,41,55,var(--tw-bg-opacity))}.dark .dark\\:hover\\:bg-litepie-secondary-700:hover{--tw-bg-opacity:1;background-color:rgba(55,65,81,var(--tw-bg-opacity))}.dark .dark\\:focus\\:bg-litepie-secondary-600:focus{--tw-bg-opacity:1;background-color:rgba(75,85,99,var(--tw-bg-opacity))}.dark .dark\\:focus\\:bg-litepie-secondary-700:focus{--tw-bg-opacity:1;background-color:rgba(55,65,81,var(--tw-bg-opacity))}.bg-opacity-60{--tw-bg-opacity:0.6}.dark .dark\\:bg-opacity-50,.dark .dark\\:focus\\:bg-opacity-50:focus{--tw-bg-opacity:0.5}.p-1{padding:.25rem}.p-1\\.5{padding:.375rem}.px-0{padding-left:0;padding-right:0}.px-1{padding-left:.25rem;padding-right:.25rem}.px-2{padding-left:.5rem;padding-right:.5rem}.px-3{padding-left:.75rem;padding-right:.75rem}.px-4{padding-left:1rem;padding-right:1rem}.px-0\\.5{padding-left:.125rem;padding-right:.125rem}.px-1\\.5{padding-left:.375rem;padding-right:.375rem}.py-1{padding-top:.25rem;padding-bottom:.25rem}.py-2{padding-top:.5rem;padding-bottom:.5rem}.py-3{padding-top:.75rem;padding-bottom:.75rem}.py-1\\.5{padding-top:.375rem;padding-bottom:.375rem}.pr-0{padding-right:0}.font-mono{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace}.text-xs{font-size:.75rem;line-height:1rem}.text-sm{font-size:.875rem;line-height:1.25rem}.text-base{font-size:1rem;line-height:1.5rem}.font-light{font-weight:300}.font-normal{font-weight:400}.font-medium{font-weight:500}.font-semibold{font-weight:600}.font-bold{font-weight:700}.uppercase{text-transform:uppercase}.leading-6{line-height:1.5rem}.leading-relaxed{line-height:1.625}.tracking-wide{letter-spacing:.025em}.text-white{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity))}.text-gray-400{--tw-text-opacity:1;color:rgba(156,163,175,var(--tw-text-opacity))}.text-gray-900{--tw-text-opacity:1;color:rgba(17,24,39,var(--tw-text-opacity))}.text-litepie-primary-500{--tw-text-opacity:1;color:rgba(16,185,129,var(--tw-text-opacity))}.text-litepie-primary-600{--tw-text-opacity:1;color:rgba(5,150,105,var(--tw-text-opacity))}.text-litepie-secondary-400{--tw-text-opacity:1;color:rgba(156,163,175,var(--tw-text-opacity))}.text-litepie-secondary-600{--tw-text-opacity:1;color:rgba(75,85,99,var(--tw-text-opacity))}.text-litepie-secondary-700{--tw-text-opacity:1;color:rgba(55,65,81,var(--tw-text-opacity))}.hover\\:text-gray-900:hover{--tw-text-opacity:1;color:rgba(17,24,39,var(--tw-text-opacity))}.hover\\:text-litepie-primary-700:hover{--tw-text-opacity:1;color:rgba(4,120,87,var(--tw-text-opacity))}.hover\\:text-litepie-secondary-900:hover{--tw-text-opacity:1;color:rgba(17,24,39,var(--tw-text-opacity))}.focus\\:text-litepie-primary-600:focus{--tw-text-opacity:1;color:rgba(5,150,105,var(--tw-text-opacity))}.focus\\:text-litepie-secondary-900:focus{--tw-text-opacity:1;color:rgba(17,24,39,var(--tw-text-opacity))}.dark .dark\\:text-litepie-primary-400{--tw-text-opacity:1;color:rgba(52,211,153,var(--tw-text-opacity))}.dark .dark\\:text-litepie-secondary-100{--tw-text-opacity:1;color:rgba(243,244,246,var(--tw-text-opacity))}.dark .dark\\:text-litepie-secondary-200{--tw-text-opacity:1;color:rgba(229,231,235,var(--tw-text-opacity))}.dark .dark\\:text-litepie-secondary-300{--tw-text-opacity:1;color:rgba(209,213,219,var(--tw-text-opacity))}.dark .dark\\:hover\\:text-litepie-primary-300:hover{--tw-text-opacity:1;color:rgba(110,231,183,var(--tw-text-opacity))}.dark .dark\\:hover\\:text-litepie-secondary-100:hover{--tw-text-opacity:1;color:rgba(243,244,246,var(--tw-text-opacity))}.dark .dark\\:hover\\:text-litepie-secondary-300:hover{--tw-text-opacity:1;color:rgba(209,213,219,var(--tw-text-opacity))}.dark .dark\\:focus\\:text-litepie-primary-300:focus{--tw-text-opacity:1;color:rgba(110,231,183,var(--tw-text-opacity))}.dark .dark\\:focus\\:text-litepie-secondary-100:focus{--tw-text-opacity:1;color:rgba(243,244,246,var(--tw-text-opacity))}.opacity-0{opacity:0}.opacity-100{opacity:1}*,:after,:before{--tw-shadow:0 0 transparent}.shadow-sm{--tw-shadow:0 1px 2px 0 rgba(0,0,0,0.05)}.shadow-inner,.shadow-sm{box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.shadow-inner{--tw-shadow:inset 0 2px 4px 0 rgba(0,0,0,0.06)}.focus\\:outline-none:focus{outline:2px solid transparent;outline-offset:2px}*,:after,:before{--tw-ring-inset:var(--tw-empty,/*!*/ /*!*/);--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,0.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent}.focus\\:ring-2:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color)}.focus\\:ring-2:focus,.focus\\:ring:focus{box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent)}.focus\\:ring:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width)) var(--tw-ring-color)}.focus\\:ring-gray-300:focus{--tw-ring-opacity:1;--tw-ring-color:rgba(209,213,219,var(--tw-ring-opacity))}.focus\\:ring-litepie-primary-500:focus{--tw-ring-opacity:1;--tw-ring-color:rgba(16,185,129,var(--tw-ring-opacity))}.focus\\:ring-opacity-10:focus{--tw-ring-opacity:0.1}.dark .dark\\:focus\\:ring-opacity-25:focus{--tw-ring-opacity:0.25}.focus\\:ring-offset-2:focus{--tw-ring-offset-width:2px}.focus\\:ring-offset-black:focus{--tw-ring-offset-color:#000}.dark .dark\\:ring-offset-litepie-secondary-800{--tw-ring-offset-color:#1f2937}.transition-all{transition-property:all;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.transition{transition-property:background-color,border-color,color,fill,stroke,opacity,box-shadow,transform,filter,-webkit-backdrop-filter;transition-property:background-color,border-color,color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter;transition-property:background-color,border-color,color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter,-webkit-backdrop-filter;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.transition-colors{transition-property:background-color,border-color,color,fill,stroke;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.transition-opacity{transition-property:opacity;transition-timing-function:cubic-bezier(.4,0,.2,1)}.duration-150,.transition-opacity{transition-duration:.15s}.duration-200{transition-duration:.2s}.duration-300{transition-duration:.3s}.ease-in{transition-timing-function:cubic-bezier(.4,0,1,1)}.ease-out{transition-timing-function:cubic-bezier(0,0,.2,1)}.litepie-datepicker-overlay:before{content:\"\";position:fixed;top:0;right:0;bottom:0;left:0;display:none;--tw-bg-opacity:1;background-color:rgba(0,0,0,var(--tw-bg-opacity));opacity:0;transition-property:opacity;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s;transition-duration:.2s;transition-timing-function:cubic-bezier(0,0,.2,1)}.litepie-datepicker-overlay.open:before{display:block;opacity:.5}.litepie-datepicker:before{--litepie-datepicker:0px;content:\"\";position:absolute;top:0;height:1rem;width:1rem;border-width:1px;--tw-border-opacity:1;border-color:rgba(0,0,0,var(--tw-border-opacity))}.dark .litepie-datepicker:before{border-color:rgba(55,65,81,var(--tw-border-opacity))}.litepie-datepicker:before{--tw-border-opacity:0.1}.dark .litepie-datepicker:before{--tw-border-opacity:1}.litepie-datepicker:before{--tw-bg-opacity:1;background-color:rgba(255,255,255,var(--tw-bg-opacity))}.dark .litepie-datepicker:before{--tw-bg-opacity:1;background-color:rgba(31,41,55,var(--tw-bg-opacity))}.litepie-datepicker:before{--tw-shadow:0 1px 3px 0 rgba(0,0,0,0.1),0 1px 2px 0 rgba(0,0,0,0.06);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow);transform:translate(50%,-50%) rotate(-45deg);-webkit-clip-path:polygon(calc(var(--litepie-datepicker)*-1) calc(var(--litepie-datepicker)*-1),calc(100% + var(--litepie-datepicker)) calc(var(--litepie-datepicker)*-1),calc(100% + var(--litepie-datepicker)) calc(100% + var(--litepie-datepicker)));clip-path:polygon(calc(var(--litepie-datepicker)*-1) calc(var(--litepie-datepicker)*-1),calc(100% + var(--litepie-datepicker)) calc(var(--litepie-datepicker)*-1),calc(100% + var(--litepie-datepicker)) calc(100% + var(--litepie-datepicker)))}.litepie-datepicker.place-left:before{left:.25rem}.litepie-datepicker.place-right:before{right:1.25rem}@media (min-width:640px){.sm\\:static{position:static}.sm\\:relative{position:relative}.sm\\:z-auto{z-index:auto}.sm\\:order-none{order:0}.sm\\:mx-1{margin-left:.25rem;margin-right:.25rem}.sm\\:mt-0{margin-top:0}.sm\\:mt-1{margin-top:.25rem}.sm\\:mt-2{margin-top:.5rem}.sm\\:mt-2\\.5{margin-top:.625rem}.sm\\:mr-2{margin-right:.5rem}.sm\\:mb-0{margin-bottom:0}.sm\\:mb-1{margin-bottom:.25rem}.sm\\:mb-1\\.5{margin-bottom:.375rem}.sm\\:ml-2{margin-left:.5rem}.sm\\:ml-3{margin-left:.75rem}.sm\\:flex{display:flex}.sm\\:hidden{display:none}.sm\\:h-8{height:2rem}.sm\\:w-1{width:.25rem}.sm\\:w-80{width:20rem}.sm\\:w-auto{width:auto}.sm\\:grid-cols-3{grid-template-columns:repeat(3,minmax(0,1fr))}.sm\\:flex-row-reverse{flex-direction:row-reverse}.sm\\:flex-nowrap{flex-wrap:nowrap}.sm\\:space-x-4>:not([hidden])~:not([hidden]){--tw-space-x-reverse:0;margin-right:calc(1rem*var(--tw-space-x-reverse));margin-left:calc(1rem*(1 - var(--tw-space-x-reverse)))}.sm\\:overflow-visible{overflow:visible}.sm\\:rounded-lg{border-radius:.5rem}.sm\\:border{border-width:1px}.sm\\:border-t-0{border-top-width:0}.sm\\:border-b{border-bottom-width:1px}.sm\\:px-1{padding-left:.25rem;padding-right:.25rem}.sm\\:px-2{padding-left:.5rem;padding-right:.5rem}.sm\\:px-6{padding-left:1.5rem;padding-right:1.5rem}.sm\\:py-1{padding-top:.25rem;padding-bottom:.25rem}.sm\\:py-1\\.5{padding-top:.375rem;padding-bottom:.375rem}.sm\\:pr-1{padding-right:.25rem}.sm\\:text-sm{font-size:.875rem;line-height:1.25rem}.sm\\:text-base{font-size:1rem;line-height:1.5rem}.sm\\:font-medium{font-weight:500}.sm\\:leading-4{line-height:1rem}.sm\\:shadow-sm{--tw-shadow:0 1px 2px 0 rgba(0,0,0,0.05);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}}@media (min-width:1024px){.lg\\:mx-0{margin-left:0;margin-right:0}.lg\\:mr-1{margin-right:.25rem}.lg\\:mb-0{margin-bottom:0}.lg\\:block{display:block}.lg\\:h-10{height:2.5rem}.lg\\:w-10{width:2.5rem}.lg\\:flex-nowrap{flex-wrap:nowrap}.lg\\:border-r{border-right-width:1px}.lg\\:border-b-0{border-bottom-width:0}.lg\\:text-xs{font-size:.75rem;line-height:1rem}}@media (min-width:1536px){.\\32xl\\:text-sm{font-size:.875rem;line-height:1.25rem}}";
styleInject(css_248z,{"insertAt":"top"});

var usePreviousDate = function (date) {
    var display = [];
    for (var i = 0; i <= date.date(0).day(); i += 1) {
        display.push(date.date(0).subtract(i, 'day'));
    }
    return display.sort(function (a, b) { return a.date() - b.date(); });
};
var useCurrentDate = function (date) {
    return Array.from({
        length: date.daysInMonth(),
    }, function (v, k) {
        if (v || k) {
            return date.date(k + 1);
        }
        return date.date(k + 1);
    });
};
var useNextDate = function (date) {
    var display = [];
    for (var i = 1; i <= 42 - (usePreviousDate(date).length + date.daysInMonth()); i += 1) {
        display.push(date.date(i).month(date.month()).add(1, 'month'));
    }
    return display;
};
var useDisableDate = function (date, _a) {
    var disableDate = _a.disableDate;
    if (typeof disableDate === 'function') {
        return disableDate(date.toDate());
    }
    return false;
};
var useBetweenRange = function (date, _a) {
    var previous = _a.previous, next = _a.next;
    var pattern;
    if (previous.isAfter(next, 'date')) {
        pattern = '(]';
    }
    else {
        pattern = '[)';
    }
    return !!(date.isBetween(previous, next, 'date', pattern) && !date.off);
};
var useToValueFromString = function (date, _a) {
    var formatter = _a.formatter;
    return date.format(formatter.date);
};
var useToValueFromArray = function (_a, _b) {
    var previous = _a.previous, next = _a.next;
    var formatter = _b.formatter, separator = _b.separator;
    return "".concat(previous.format(formatter.date)).concat(separator).concat(next.format(formatter.date));
};
var useVisibleViewport = function (el) {
    var right = el.getBoundingClientRect().right;
    var vWidth = window.innerWidth || document.documentElement.clientWidth;
    return right < vWidth;
};

var Header = function (_a) {
    var panel = _a.panel, calendar = _a.calendar, Icons = _a.Icons;
    return (React__default["default"].createElement("div", { className: "flex justify-between items-center px-2 py-1.5 rounded-md border border-black border-opacity-10 dark:border-litepie-secondary-700 dark:border-opacity-100" },
        React__default["default"].createElement("div", { className: "flex-shrink-0" }, (panel.calendar || panel.year) && (React__default["default"].createElement("span", { className: "inline-flex rounded-full" },
            React__default["default"].createElement("button", { type: "button", className: "p-1.5 rounded-full bg-white text-litepie-secondary-600 transition-colors border border-transparent hover:bg-litepie-secondary-100 hover:text-litepie-secondary-900 focus:bg-litepie-primary-50 focus:text-litepie-secondary-900 focus:border-litepie-primary-300 focus:ring focus:ring-litepie-primary-500 focus:ring-opacity-10 focus:outline-none dark:bg-litepie-secondary-800 dark:text-litepie-secondary-300 dark:hover:bg-litepie-secondary-700 dark:hover:text-litepie-secondary-300 dark:focus:bg-litepie-secondary-600 dark:focus:text-litepie-secondary-100 dark:focus:border-litepie-primary-500 dark:focus:ring-opacity-25 dark:focus:bg-opacity-50", onClick: panel.calendar ? calendar.onPrevious : calendar.onPreviousYear }, Icons.Prev ? (Icons.Prev) : (React__default["default"].createElement("svg", { className: "w-5 h-5", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" },
                React__default["default"].createElement("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: "1.5", d: panel.calendar ? "M15 19l-7-7 7-7" : "M11 19l-7-7 7-7m8 14l-7-7 7-7" }))))))),
        React__default["default"].createElement("div", { className: "px-1.5 space-x-1.5 flex flex-1" },
            React__default["default"].createElement("span", { className: "flex flex-1 rounded-md" },
                React__default["default"].createElement("button", { type: "button", className: "px-3 py-1.5 block w-full leading-relaxed rounded-md bg-white text-xs 2xl:text-sm tracking-wide text-litepie-secondary-600 font-semibold sm:font-medium transition-colors border border-transparent hover:bg-litepie-secondary-100 hover:text-litepie-secondary-900 focus:bg-litepie-primary-50 focus:text-litepie-secondary-900 focus:border-litepie-primary-300 focus:ring focus:ring-litepie-primary-500 focus:ring-opacity-10 focus:outline-none uppercase dark:bg-litepie-secondary-800 dark:text-litepie-secondary-300 dark:hover:bg-litepie-secondary-700 dark:hover:text-litepie-secondary-300 dark:focus:bg-litepie-secondary-600 dark:focus:text-litepie-secondary-100 dark:focus:border-litepie-primary-500 dark:focus:ring-opacity-25 dark:focus:bg-opacity-50", onClick: calendar.openMonth }, calendar.month)),
            React__default["default"].createElement("span", { className: "flex flex-1 rounded-md" },
                React__default["default"].createElement("button", { type: "button", className: "px-3 py-1.5 block w-full leading-relaxed rounded-md bg-white text-xs 2xl:text-sm tracking-wide text-litepie-secondary-600 font-semibold sm:font-medium transition-colors border border-transparent hover:bg-litepie-secondary-100 hover:text-litepie-secondary-900 focus:bg-litepie-primary-50 focus:text-litepie-secondary-900 focus:border-litepie-primary-300 focus:ring focus:ring-litepie-primary-500 focus:ring-opacity-10 focus:outline-none uppercase dark:bg-litepie-secondary-800 dark:text-litepie-secondary-300 dark:hover:bg-litepie-secondary-700 dark:hover:text-litepie-secondary-300 dark:focus:bg-litepie-secondary-600 dark:focus:text-litepie-secondary-100 dark:focus:border-litepie-primary-500 dark:focus:ring-opacity-25 dark:focus:bg-opacity-50", onClick: calendar.openYear }, calendar.year))),
        React__default["default"].createElement("div", { className: "flex-shrink-0" }, (panel.calendar || panel.year) && (React__default["default"].createElement("span", { className: "inline-flex rounded-full" },
            React__default["default"].createElement("button", { type: "button", className: "p-1.5 rounded-full bg-white text-litepie-secondary-600 transition-colors border border-transparent hover:bg-litepie-secondary-100 hover:text-litepie-secondary-900 focus:bg-litepie-primary-50 focus:text-litepie-secondary-900 focus:border-litepie-primary-300 focus:ring focus:ring-litepie-primary-500 focus:ring-opacity-10 focus:outline-none dark:bg-litepie-secondary-800 dark:text-litepie-secondary-300 dark:hover:bg-litepie-secondary-700 dark:hover:text-litepie-secondary-300 dark:focus:bg-litepie-secondary-600 dark:focus:text-litepie-secondary-100 dark:focus:border-litepie-primary-500 dark:focus:ring-opacity-25 dark:focus:bg-opacity-50", onClick: panel.calendar ? calendar.onNext : calendar.onNextYear }, Icons.Next ? (Icons.Next) : (React__default["default"].createElement("svg", { className: "w-5 h-5", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" },
                React__default["default"].createElement("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: "1.5", d: panel.calendar ? "M9 5l7 7-7 7" : "M13 5l7 7-7 7M5 5l7 7-7 7" })))))))));
};

/* eslint-disable react/no-array-index-key */
var Month = function (_a) {
    var months = _a.months, updateMonth = _a.updateMonth;
    return (React__default["default"].createElement("div", { className: "flex flex-wrap mt-1.5" }, months.map(function (month, key) { return (React__default["default"].createElement("div", { key: key, className: "w-1/2 px-0.5" },
        React__default["default"].createElement("span", { className: "flex rounded-md mt-1.5" },
            React__default["default"].createElement("button", { type: "button", className: "block w-full px-3 py-2 text-xs font-medium leading-6 tracking-wide uppercase transition-colors bg-white border border-transparent rounded-md 2xl:text-sm text-litepie-secondary-600 hover:bg-litepie-secondary-100 hover:text-litepie-secondary-900 focus:bg-litepie-primary-50 focus:text-litepie-secondary-900 focus:border-litepie-primary-300 focus:ring focus:ring-litepie-primary-500 focus:ring-opacity-10 focus:outline-none dark:bg-litepie-secondary-800 dark:hover:bg-litepie-secondary-700 dark:text-litepie-secondary-300 dark:hover:text-litepie-secondary-100 dark:focus:bg-litepie-secondary-700", onClick: function () { return updateMonth(key); } }, month)))); })));
};

/* eslint-disable react/no-array-index-key */
var Week = function (_a) {
    var weeks = _a.weeks;
    return (React__default["default"].createElement("div", { className: "grid grid-cols-7 py-2 mt-0.5 border-b border-black border-opacity-10 dark:text-litepie-secondary-200 dark:border-litepie-secondary-700 dark:border-opacity-100" }, weeks.map(function (day, index) { return (React__default["default"].createElement("div", { key: index },
        React__default["default"].createElement("span", null,
            " ",
            day))); })));
};

/* eslint-disable react/no-array-index-key */
var Year = function (_a) {
    var years = _a.years, _b = _a.asPrevOrNext, asPrevOrNext = _b === void 0 ? false : _b, updateYear = _a.updateYear;
    return (React__default["default"].createElement("div", { className: "flex flex-wrap" }, years.map(function (year, key) { return (React__default["default"].createElement("div", { key: key, className: "w-1/2 px-0.5" },
        React__default["default"].createElement("span", { className: "flex rounded-md mt-1.5" },
            React__default["default"].createElement("button", { type: "button", className: "block w-full px-3 py-2 text-xs font-medium leading-6 tracking-wide uppercase transition-colors bg-white border border-transparent rounded-md 2xl:text-sm text-litepie-secondary-600 hover:bg-litepie-secondary-100 hover:text-litepie-secondary-900 focus:bg-litepie-primary-50 focus:text-litepie-secondary-900 focus:border-litepie-primary-300 focus:ring focus:ring-litepie-primary-500 focus:ring-opacity-10 focus:outline-none dark:bg-litepie-secondary-800 dark:hover:bg-litepie-secondary-700 dark:text-litepie-secondary-300 dark:hover:text-litepie-secondary-100 dark:focus:bg-litepie-secondary-700", onClick: function () { return updateYear(year, asPrevOrNext); } }, year)))); })));
};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var Calender = function (_a) {
    var calendar = _a.calendar, asRange = _a.asRange, isBetweenRange = _a.isBetweenRange, betweenRangeClasses = _a.betweenRangeClasses, datepickerClasses = _a.datepickerClasses, updateDate = _a.updateDate, asPrevOrNext = _a.asPrevOrNext, atMouseOver = _a.atMouseOver, _b = _a.selectionColor, selectionColor = _b === void 0 ? { text: undefined, background: undefined } : _b;
    return (React__default["default"].createElement(reactTransitionGroup.TransitionGroup, { classnames: {
            enter: 'opacity-0',
            enterDone: 'opacity-100',
            enterActive: 'transition-opacity duration-300 ease-out',
            exit: 'opacity-100',
            exitDone: 'opacity-0',
            exitActive: 'transition-opacity duration-200 ease-in',
        } },
        React__default["default"].createElement("div", { className: "grid grid-cols-7 gap-y-0.5 my-1" }, calendar.date().map(function (date, keyDate) {
            var css = betweenRangeClasses(date);
            var datePickerCss = datepickerClasses(date);
            var isSelected = isBetweenRange(date) || date.hovered();
            var datePickerStyle = datePickerCss.css ? datePickerCss.css : {};
            datePickerStyle = __assign(__assign({}, (selectionColor.text && isBetweenRange(date) ? { color: selectionColor.text } : {})), datePickerStyle);
            return (React__default["default"].createElement("div", { key: keyDate, className: "relative".concat(asRange && date.duration() ? ' litepie-tooltip' : ''), "data-tooltip": date.duration() },
                isSelected && (React__default["default"].createElement(reactTransitionGroup.CSSTransition, { timeout: 5000, classNames: {
                        enter: 'opacity-0',
                        enterDone: 'opacity-100',
                        enterActive: 'transition-opacity duration-200 ease-out',
                        exit: 'opacity-100',
                        exitDone: 'opacity-0',
                        exitActive: 'transition-opacity duration-150 ease-in',
                    } },
                    React__default["default"].createElement("span", { className: "absolute bg-litepie-primary-100 bg-opacity-60 dark:bg-litepie-secondary-700 dark:bg-opacity-50 ".concat(css), style: selectionColor ? { backgroundColor: selectionColor.background } : undefined }))),
                React__default["default"].createElement("button", { type: "button", className: "litepie-datepicker-date relative w-12 h-12 lg:w-10 lg:h-10 flex justify-center items-center text-xs 2xl:text-sm focus:outline-none ".concat(datePickerCss.class, " ").concat(asRange ? 'transition-all' : 'transition-colors'), style: datePickerStyle, disabled: date.disabled || date.inRange(), onClick: function () { return updateDate(date, asPrevOrNext); }, onMouseEnter: function () { return atMouseOver(date); }, onFocus: function () { return atMouseOver(date); }, "data-date": date.toDate() }, date.date())));
        }))));
};

/* eslint-disable react/no-array-index-key */
var Shortcut = function (_a) {
    var 
    // shortcuts,
    // setToCustomShortcut,
    setToday = _a.setToday, setToYesterday = _a.setToYesterday, setToLastDay = _a.setToLastDay, setToThisMonth = _a.setToThisMonth, setToLastMonth = _a.setToLastMonth;
    return (
    // const withShortcut: any = () =>
    // if (typeof shortcuts === 'function') {
    //   return shortcuts();
    // }
    //   false;
    React__default["default"].createElement("div", { className: "relative order-last w-full border-t border-b-0 border-black sm:border-t-0 sm:border-b lg:border-b-0 lg:border-r border-opacity-10 sm:order-none dark:border-litepie-secondary-700 dark:border-opacity-100 sm:mt-1 lg:mr-1 sm:mb-1 lg:mb-0 sm:mx-1 lg:mx-0" },
        React__default["default"].createElement("ol", { className: "grid grid-cols-2 sm:grid-cols-3 gap-1 lg:block w-full pr-0 sm:pr-1 mt-1.5 sm:mt-0 sm:mb-1.5 lg:mb-0" },
            React__default["default"].createElement("li", null,
                React__default["default"].createElement("a", { href: "#", className: "block px-2 py-2 text-sm font-medium transition-colors rounded litepie-shortcuts lg:text-xs sm:leading-4 whitespace-nowrap text-litepie-primary-600 hover:text-litepie-primary-700 hover:bg-litepie-secondary-100 focus:bg-litepie-secondary-100 focus:text-litepie-primary-600 dark:hover:bg-litepie-secondary-700 dark:hover:text-litepie-primary-300 dark:text-litepie-primary-400 dark:focus:bg-litepie-secondary-700 dark:focus:text-litepie-primary-300", onClick: function (e) {
                        e.preventDefault();
                        return setToday(e);
                    } }, "Today")),
            React__default["default"].createElement("li", null,
                React__default["default"].createElement("a", { href: "#", className: "block px-2 py-2 text-sm font-medium transition-colors rounded litepie-shortcuts lg:text-xs sm:leading-4 whitespace-nowrap text-litepie-primary-600 hover:text-litepie-primary-700 hover:bg-litepie-secondary-100 focus:bg-litepie-secondary-100 focus:text-litepie-primary-600 dark:hover:bg-litepie-secondary-700 dark:hover:text-litepie-primary-300 dark:text-litepie-primary-400 dark:focus:bg-litepie-secondary-700 dark:focus:text-litepie-primary-300", onClick: function (e) {
                        e.preventDefault();
                        return setToYesterday(e);
                    } }, "Yesterday")),
            React__default["default"].createElement("li", null,
                React__default["default"].createElement("a", { href: "#", className: "block px-2 py-2 text-sm font-medium transition-colors rounded litepie-shortcuts lg:text-xs sm:leading-4 whitespace-nowrap text-litepie-primary-600 hover:text-litepie-primary-700 hover:bg-litepie-secondary-100 focus:bg-litepie-secondary-100 focus:text-litepie-primary-600 dark:hover:bg-litepie-secondary-700 dark:hover:text-litepie-primary-300 dark:text-litepie-primary-400 dark:focus:bg-litepie-secondary-700 dark:focus:text-litepie-primary-300", onClick: function (e) {
                        e.preventDefault();
                        return setToLastDay(7);
                    } }, "Last 7 Days")),
            React__default["default"].createElement("li", null,
                React__default["default"].createElement("a", { href: "#", className: "block px-2 py-2 text-sm font-medium transition-colors rounded litepie-shortcuts lg:text-xs sm:leading-4 whitespace-nowrap text-litepie-primary-600 hover:text-litepie-primary-700 hover:bg-litepie-secondary-100 focus:bg-litepie-secondary-100 focus:text-litepie-primary-600 dark:hover:bg-litepie-secondary-700 dark:hover:text-litepie-primary-300 dark:text-litepie-primary-400 dark:focus:bg-litepie-secondary-700 dark:focus:text-litepie-primary-300", onClick: function (e) {
                        e.preventDefault();
                        return setToLastDay(30);
                    } }, "Last 30 Days")),
            React__default["default"].createElement("li", null,
                React__default["default"].createElement("a", { href: "#", className: "block px-2 py-2 text-sm font-medium transition-colors rounded litepie-shortcuts lg:text-xs sm:leading-4 whitespace-nowrap text-litepie-primary-600 hover:text-litepie-primary-700 hover:bg-litepie-secondary-100 focus:bg-litepie-secondary-100 focus:text-litepie-primary-600 dark:hover:bg-litepie-secondary-700 dark:hover:text-litepie-primary-300 dark:text-litepie-primary-400 dark:focus:bg-litepie-secondary-700 dark:focus:text-litepie-primary-300", onClick: function (e) {
                        e.preventDefault();
                        return setToThisMonth(e);
                    } }, "This Month")),
            React__default["default"].createElement("li", null,
                React__default["default"].createElement("a", { href: "#", className: "block px-2 py-2 text-sm font-medium transition-colors rounded litepie-shortcuts lg:text-xs sm:leading-4 whitespace-nowrap text-litepie-primary-600 hover:text-litepie-primary-700 hover:bg-litepie-secondary-100 focus:bg-litepie-secondary-100 focus:text-litepie-primary-600 dark:hover:bg-litepie-secondary-700 dark:hover:text-litepie-primary-300 dark:text-litepie-primary-400 dark:focus:bg-litepie-secondary-700 dark:focus:text-litepie-primary-300", onClick: function (e) {
                        e.preventDefault();
                        return setToLastMonth(e);
                    } }, "Last Month")))));
};

var datepickerReducer = function (state, action) {
    var _a, _b;
    switch (action.type) {
        case 'change':
            switch (action.payload.key) {
                case 'year':
                    return __assign(__assign({}, state), (_a = {}, _a[action.payload.key] = __assign(__assign({}, state[action.payload.key]), action.payload.value), _a));
                default:
                    return __assign(__assign({}, state), (_b = {}, _b[action.payload.key] = action.payload.value, _b));
            }
        case 'multiple':
            return __assign(__assign({}, state), action.payload);
        default:
            throw new Error();
    }
};

var panelReducer = function (state, action) {
    var _a;
    switch (action.type) {
        case 'change':
            return __assign(__assign({}, state), (_a = {}, _a[action.payload.key] = __assign(__assign({}, state[action.payload.key]), action.payload.value), _a));
        case 'multiple':
            return __assign(__assign({}, state), action.payload);
        default:
            throw new Error();
    }
};

/* eslint-disable no-console */
dayjs__default["default"].extend(localeData__default["default"]);
dayjs__default["default"].extend(localizedFormat__default["default"]);
dayjs__default["default"].extend(customParseFormat__default["default"]);
dayjs__default["default"].extend(isToday__default["default"]);
dayjs__default["default"].extend(isBetween__default["default"]);
dayjs__default["default"].extend(duration__default["default"]);
var Datepicker = function (props) {
    var _a = props.overlay, overlay = _a === void 0 ? true : _a, _b = props.asSingle, asSingle = _b === void 0 ? false : _b, _c = props.useRange, useRange = _c === void 0 ? false : _c, disableDate = props.disableDate, disableInRange = props.disableInRange, _d = props.autoApply, autoApply = _d === void 0 ? false : _d, _e = props.shortcuts, shortcuts = _e === void 0 ? true : _e, _f = props.formatter, formatter = _f === void 0 ? {
        date: 'YYYY-MMM-DD',
        month: 'MMM',
    } : _f, _g = props.separator, separator = _g === void 0 ? " ~ " : _g, startFrom = props.startFrom, _h = props.options, options = _h === void 0 ? {
        footer: {
            apply: 'apply',
            cancel: 'cancel',
        },
    } : _h, _j = props.dark, dark = _j === void 0 ? false : _j, onChange = props.onChange, _k = props.styles, styles = _k === void 0 ? { apply: undefined, cancel: undefined } : _k, _l = props.selectionColor, selectionColor = _l === void 0 ? {
        ends: { background: undefined, text: undefined },
        selection: { background: undefined, text: undefined },
    } : _l, _m = props.HeaderIcons, HeaderIcons = _m === void 0 ? {
        Prev: undefined,
        Next: undefined,
    } : _m, _o = props.CalenderIcon, CalenderIcon = _o === void 0 ? undefined : _o;
    var _p = React__default["default"].useState([dayjs__default["default"](), dayjs__default["default"]().add(1, 'M')]), modelValue = _p[0], setModelValue = _p[1];
    var LitepieRef = React__default["default"].useRef(null);
    var Litepiedatepicker = React__default["default"].useRef(null);
    var LitepieButtonRef = React__default["default"].useRef(null);
    var _q = React__default["default"].useState(false), show = _q[0], setShow = _q[1];
    var _r = React__default["default"].useState(true), placement = _r[0], setPlacement = _r[1];
    var _s = React__default["default"].useState(null), selection = _s[0], setSelection = _s[1];
    var _t = React__default["default"].useState(''), pickerValue = _t[0], setPickerValue = _t[1];
    var _u = React__default["default"].useState([]), hoverValue = _u[0], setHoverValue = _u[1];
    var _v = React__default["default"].useState([]), applyValue = _v[0], setApplyValue = _v[1];
    var _w = React__default["default"].useState(null), previous = _w[0], setPrevious = _w[1];
    var _x = React__default["default"].useReducer(panelReducer, {
        previous: {
            calendar: true,
            month: false,
            year: false,
        },
        next: {
            calendar: true,
            month: false,
            year: false,
        },
    }), panel = _x[0], panelDispatch = _x[1];
    var _y = React__default["default"].useReducer(datepickerReducer, {
        previous: dayjs__default["default"](),
        next: dayjs__default["default"]().add(1, 'month'),
        year: {
            previous: dayjs__default["default"]().year(),
            next: dayjs__default["default"]().year(),
        },
        weeks: dayjs__default["default"].weekdaysShort(),
        months: formatter.month === 'MMM' ? dayjs__default["default"].monthsShort() : dayjs__default["default"].months(),
    }), datepicker = _y[0], datePickerDispatch = _y[1];
    var weeks = function () { return datepicker.weeks; };
    var months = function () { return datepicker.months; };
    var useObject = function () { return typeof modelValue === 'object'; };
    var inRangeDate = function (date) {
        if (disableInRange)
            return false;
        if (pickerValue === '')
            return false;
        var s;
        var e;
        if (Array.isArray(modelValue)) {
            var start = modelValue[0], end = modelValue[1];
            s = start;
            e = end;
        }
        else if (useObject()) {
            if (modelValue) {
                var _a = Object.values(modelValue), start = _a[0], end = _a[1];
                s = start;
                e = end;
            }
        }
        else if (typeof modelValue === 'string') {
            var _b = modelValue.split(separator), start = _b[0], end = _b[1];
            s = start;
            e = end;
        }
        return date.isBetween(dayjs__default["default"](s, formatter.date, true), dayjs__default["default"](e, formatter.date, true), 'date', '[]');
    };
    var asRange = function () {
        if (!useRange && !asSingle) {
            return true;
        }
        if (!useRange && asSingle) {
            return false;
        }
        if (useRange && !asSingle) {
            return true;
        }
        return !!(useRange && asSingle);
    };
    var calendar = React__default["default"].useMemo(function () { return ({
        previous: {
            date: function () {
                return usePreviousDate(datepicker.previous)
                    .concat(useCurrentDate(datepicker.previous))
                    .concat(useNextDate(datepicker.previous))
                    .map(function (v) {
                    var value = v;
                    value.today = v.isToday();
                    value.active = datepicker.previous.month() === v.month();
                    value.off = datepicker.previous.month() !== v.month();
                    value.sunday = v.day() === 0;
                    value.disabled = useDisableDate(v, { disableDate: disableDate }) && !inRangeDate(v);
                    value.inRange = function () {
                        if (asSingle && !useRange) {
                            return datepicker.previous.month() !== v.month();
                        }
                        return null;
                    };
                    value.hovered = function () {
                        if (!asRange())
                            return false;
                        if (hoverValue.length > 1) {
                            return ((v.isBetween(hoverValue[0], hoverValue[1], 'date', '()') ||
                                v.isBetween(hoverValue[1], hoverValue[0], 'date', '()')) &&
                                datepicker.previous.month() === v.month());
                        }
                        return false;
                    };
                    value.duration = function () { return false; };
                    return value;
                });
            },
            month: datepicker.previous && datepicker.previous.format && datepicker.previous.format(formatter.month),
            year: datepicker.previous && datepicker.previous.year && datepicker.previous.year(),
            years: function () {
                return Array.from({
                    length: 12,
                }, function (v, k) {
                    if (v || k) {
                        return datepicker.year.previous + k;
                    }
                    return datepicker.year.previous + k;
                });
            },
            onPrevious: function () {
                datePickerDispatch({
                    type: 'change',
                    payload: {
                        key: 'previous',
                        value: datepicker.previous.subtract(1, 'month'),
                    },
                });
            },
            onNext: function () {
                datePickerDispatch({
                    type: 'change',
                    payload: {
                        key: 'previous',
                        value: datepicker.previous.add(1, 'month'),
                    },
                });
                if (datepicker.previous.diff(datepicker.next, 'month') === -1) {
                    datePickerDispatch({
                        type: 'change',
                        payload: {
                            key: 'next',
                            value: datepicker.next.add(1, 'month'),
                        },
                    });
                }
            },
            onPreviousYear: function () {
                datePickerDispatch({
                    type: 'change',
                    payload: {
                        key: 'year',
                        value: { previous: datepicker.year.previous - 12 },
                    },
                });
            },
            onNextYear: function () {
                datePickerDispatch({
                    type: 'change',
                    payload: {
                        key: 'year',
                        value: { previous: datepicker.year.previous + 12 },
                    },
                });
            },
            openMonth: function () {
                panelDispatch({
                    type: 'change',
                    payload: {
                        key: 'previous',
                        value: {
                            month: !panel.previous.month,
                            year: false,
                            calendar: !!panel.previous.month,
                        },
                    },
                });
            },
            setMonth: function (event) {
                var prevVal = datepicker.previous.month(event);
                datePickerDispatch({
                    type: 'change',
                    payload: {
                        key: 'previous',
                        value: prevVal,
                    },
                });
                panelDispatch({
                    type: 'change',
                    payload: {
                        key: 'previous',
                        value: {
                            month: !panel.previous.month,
                            year: false,
                            calendar: !!panel.previous.month,
                        },
                    },
                });
                if (datepicker.next.isSame(prevVal, 'month') || datepicker.next.isBefore(prevVal)) {
                    datePickerDispatch({
                        type: 'multiple',
                        payload: {
                            next: prevVal.add(1, 'month'),
                            year: {
                                previous: datepicker.year.previous,
                                next: datepicker.next.year(),
                            },
                        },
                    });
                }
            },
            openYear: function () {
                panelDispatch({
                    type: 'change',
                    payload: {
                        key: 'previous',
                        value: {
                            year: !panel.previous.year,
                            month: false,
                            calendar: !!panel.previous.year,
                        },
                    },
                });
            },
            setYear: function (event, asNext) {
                var prevVal = datepicker.previous.year(event);
                if (!asNext) {
                    datePickerDispatch({
                        type: 'change',
                        payload: {
                            key: 'previous',
                            value: prevVal,
                        },
                    });
                    panelDispatch({
                        type: 'change',
                        payload: {
                            key: 'previous',
                            value: {
                                year: !panel.previous.year,
                                calendar: panel.previous.year,
                            },
                        },
                    });
                    var payload = {
                        year: {
                            previous: prevVal.year(),
                            next: datepicker.next.year(),
                        },
                    };
                    if (datepicker.next.isSame(prevVal, 'month') || datepicker.next.isBefore(prevVal)) {
                        payload.next = prevVal.add(1, 'month');
                    }
                    datePickerDispatch({
                        type: 'multiple',
                        payload: payload,
                    });
                }
            },
        },
        next: {
            date: function () {
                return usePreviousDate(datepicker.next)
                    .concat(useCurrentDate(datepicker.next))
                    .concat(useNextDate(datepicker.next))
                    .map(function (v) {
                    var value = v;
                    value.today = v.isToday();
                    value.active = datepicker.next.month() === v.month();
                    value.off = datepicker.next.month() !== v.month();
                    value.sunday = v.day() === 0;
                    value.disabled = useDisableDate(v, { disableDate: disableDate }) && !inRangeDate(v);
                    value.inRange = function () {
                        if (asSingle && !useRange) {
                            return datepicker.next.month() !== v.month();
                        }
                        return undefined;
                    };
                    value.hovered = function () {
                        if (hoverValue.length > 1) {
                            return ((v.isBetween(hoverValue[0], hoverValue[1], 'date', '()') ||
                                v.isBetween(hoverValue[1], hoverValue[0], 'date', '()')) &&
                                datepicker.next.month() === v.month());
                        }
                        return false;
                    };
                    value.duration = function () { return false; };
                    return value;
                });
            },
            month: datepicker.next && datepicker.next.format(formatter.month),
            year: datepicker.next && datepicker.next.year(),
            years: function () {
                return Array.from({
                    length: 12,
                }, function (v, k) {
                    if (v || k) {
                        return datepicker.year.next + k;
                    }
                    return datepicker.year.next + k;
                });
            },
            onPrevious: function () {
                datePickerDispatch({
                    type: 'change',
                    payload: {
                        key: 'next',
                        value: datepicker.next.subtract(1, 'month'),
                    },
                });
                if (datepicker.next.diff(datepicker.previous, 'month') === 1) {
                    datePickerDispatch({
                        type: 'change',
                        payload: {
                            key: 'previous',
                            value: datepicker.previous.subtract(1, 'month'),
                        },
                    });
                }
            },
            onNext: function () {
                datePickerDispatch({
                    type: 'change',
                    payload: {
                        key: 'next',
                        value: datepicker.next.add(1, 'month'),
                    },
                });
            },
            onPreviousYear: function () {
                datePickerDispatch({
                    type: 'change',
                    payload: {
                        key: 'year',
                        value: { next: datepicker.year.next - 12 },
                    },
                });
            },
            onNextYear: function () {
                datePickerDispatch({
                    type: 'change',
                    payload: {
                        key: 'year',
                        value: { next: datepicker.year.next + 12 },
                    },
                });
            },
            openMonth: function () {
                panelDispatch({
                    type: 'change',
                    payload: {
                        key: 'next',
                        value: {
                            month: !panel.next.month,
                            year: false,
                            calendar: !!panel.next.month,
                        },
                    },
                });
            },
            setMonth: function (event) {
                var nextVal = datepicker.next.month(event);
                datePickerDispatch({
                    type: 'change',
                    payload: {
                        key: 'next',
                        value: nextVal,
                    },
                });
                panelDispatch({
                    type: 'change',
                    payload: {
                        key: 'next',
                        value: {
                            month: !panel.next.month,
                            year: false,
                            calendar: !!panel.next.month,
                        },
                    },
                });
                var payload = {
                    year: {
                        previous: datepicker.previous.year(),
                        next: datepicker.year.next,
                    },
                    previous: datepicker.previous,
                };
                if (datepicker.previous.isSame(nextVal, 'month') || datepicker.previous.isAfter(nextVal)) {
                    payload.previous = nextVal.subtract(1, 'month');
                }
                datePickerDispatch({
                    type: 'multiple',
                    payload: payload,
                });
            },
            openYear: function () {
                panelDispatch({
                    type: 'change',
                    payload: {
                        key: 'next',
                        value: {
                            year: !panel.next.year,
                            month: false,
                            calendar: !!panel.next.year,
                        },
                    },
                });
            },
            setYear: function (event, asNext) {
                if (asNext) {
                    var nextVal = datepicker.next.year(event);
                    datePickerDispatch({
                        type: 'change',
                        payload: {
                            key: 'next',
                            value: nextVal,
                        },
                    });
                    panelDispatch({
                        type: 'change',
                        payload: {
                            key: 'next',
                            value: {
                                year: !panel.next.year,
                                month: false,
                                calendar: !!panel.next.year,
                            },
                        },
                    });
                    var payload = {
                        year: {
                            previous: datepicker.previous.year(),
                            next: nextVal.year(),
                        },
                    };
                    if (datepicker.previous.isSame(nextVal, 'month') || datepicker.previous.isAfter(nextVal)) {
                        payload.previous = nextVal.subtract(1, 'month');
                    }
                    datePickerDispatch({
                        type: 'multiple',
                        payload: payload,
                    });
                }
            },
        },
    }); }, [datepicker, panel]);
    var force = function () {
        setPrevious(null);
        setHoverValue([]);
        setSelection(null);
    };
    var setDate = function (date, asNext) {
        if (asNext === void 0) { asNext = false; }
        if (asRange()) {
            if (previous) {
                if (autoApply) {
                    if (date.isBefore(previous)) {
                        setPickerValue(useToValueFromArray({
                            previous: date,
                            next: previous,
                        }, { formatter: formatter, separator: separator }));
                    }
                    else {
                        setPickerValue(useToValueFromArray({
                            previous: previous,
                            next: date,
                        }, { formatter: formatter, separator: separator }));
                    }
                    var _a = pickerValue.split(separator), s = _a[0], e = _a[1];
                    if (Array.isArray(modelValue)) {
                        setModelValue([
                            dayjs__default["default"](s, formatter.date, true).format(formatter.date),
                            dayjs__default["default"](e, formatter.date, true).format(formatter.date),
                        ]);
                    }
                    else if (useObject()) {
                        var obj = {};
                        var _b = Object.keys(modelValue), start = _b[0], end = _b[1];
                        obj[start] = s;
                        obj[end] = e;
                        setModelValue(obj);
                    }
                    else {
                        setModelValue(useToValueFromArray({
                            previous: dayjs__default["default"](s, formatter.date, true),
                            next: dayjs__default["default"](e, formatter.date, true),
                        }, { formatter: formatter, separator: separator }));
                    }
                    setShow(false);
                    setApplyValue([]);
                    if (!dayjs__default["default"](s, formatter.date, true).isSame(dayjs__default["default"](e, formatter.date, true), 'month')) {
                        datePickerDispatch({
                            type: 'multiple',
                            payload: {
                                previous: dayjs__default["default"](s, formatter.date, true),
                                next: dayjs__default["default"](e, formatter.date, true),
                            },
                        });
                    }
                    force();
                }
                else {
                    var tempApplyValue = applyValue;
                    if (previous.isAfter(date, 'month')) {
                        tempApplyValue = [date, previous];
                        setApplyValue(tempApplyValue);
                    }
                    else {
                        tempApplyValue = [previous, date];
                        setApplyValue(tempApplyValue);
                    }
                    var _c = tempApplyValue, s = _c[0], e = _c[1];
                    if (!s.isSame(e, 'month')) {
                        datePickerDispatch({
                            type: 'multiple',
                            payload: {
                                previous: s,
                                next: e,
                            },
                        });
                    }
                    force();
                }
            }
            else {
                setApplyValue([]);
                setPrevious(date);
                setSelection(date);
                hoverValue.push(date);
                applyValue.push(date);
                if (asNext) {
                    datePickerDispatch({
                        type: 'change',
                        payload: {
                            key: 'next',
                            value: date,
                        },
                    });
                    if (datepicker.previous.isSame(date, 'month')) {
                        datePickerDispatch({
                            type: 'change',
                            payload: {
                                key: 'next',
                                value: date.add(1, 'month'),
                            },
                        });
                    }
                }
                else {
                    datePickerDispatch({
                        type: 'change',
                        payload: {
                            key: 'previous',
                            value: date,
                        },
                    });
                    if (datepicker.next.isSame(date, 'month')) {
                        datePickerDispatch({
                            type: 'multiple',
                            payload: {
                                previous: datepicker.next,
                                next: date.add(1, 'month'),
                            },
                        });
                    }
                }
            }
        }
        else if (autoApply) {
            setPickerValue(useToValueFromString(date, { formatter: formatter }));
            if (Array.isArray(modelValue)) {
                setModelValue([pickerValue]);
            }
            else if (useObject()) {
                var obj = {};
                var start = Object.keys(modelValue)[0];
                obj[start] = pickerValue;
                setModelValue(obj);
            }
            else {
                setModelValue(pickerValue);
            }
            setShow(false);
            setApplyValue([]);
            force();
        }
        else {
            setApplyValue([date]);
            force();
        }
    };
    var applyDate = function () {
        if (applyValue.length < 1)
            return false;
        var date;
        if (asRange()) {
            var s = applyValue[0], e = applyValue[1];
            if (e.isBefore(s)) {
                date = useToValueFromArray({
                    previous: e,
                    next: s,
                }, { formatter: formatter, separator: separator });
            }
            else {
                date = useToValueFromArray({
                    previous: s,
                    next: e,
                }, { formatter: formatter, separator: separator });
            }
        }
        else {
            var s = applyValue[0];
            date = s;
        }
        if (asRange()) {
            var _a = date.split(separator), s = _a[0], e = _a[1];
            if (Array.isArray(modelValue)) {
                setModelValue([
                    dayjs__default["default"](s, formatter.date, true).format(formatter.date),
                    dayjs__default["default"](e, formatter.date, true).format(formatter.date),
                ]);
            }
            else if (useObject()) {
                var obj = {};
                var _b = Object.keys(modelValue), start = _b[0], end = _b[1];
                obj[start] = s;
                obj[end] = e;
                setModelValue(obj);
            }
            else {
                setModelValue(useToValueFromArray({
                    previous: dayjs__default["default"](s, formatter.date, true),
                    next: dayjs__default["default"](e, formatter.date, true),
                }, { formatter: formatter, separator: separator }));
            }
            setPickerValue(date);
        }
        else {
            setPickerValue(date.format(formatter.date));
            if (Array.isArray(modelValue)) {
                setModelValue([pickerValue]);
            }
            else if (useObject()) {
                var obj = {};
                var start = Object.keys(modelValue)[0];
                obj[start] = pickerValue;
                setModelValue(obj);
            }
            else {
                setModelValue(pickerValue);
            }
        }
        setShow(false);
        return undefined;
    };
    var atMouseOver = function (date) {
        if (!asRange())
            return false;
        if (previous) {
            setHoverValue([previous, date]);
        }
        else {
            setHoverValue([]);
            return false;
        }
        return undefined;
    };
    var isBetweenRange = function (date) {
        if (previous && autoApply)
            return false;
        var s;
        var e;
        if (hoverValue.length > 1) {
            var start = hoverValue[0], end = hoverValue[1];
            s = dayjs__default["default"](start, formatter.date, true);
            e = dayjs__default["default"](end, formatter.date, true);
        }
        else if (Array.isArray(modelValue)) {
            if (autoApply) {
                var start = modelValue[0], end = modelValue[1];
                s = start && dayjs__default["default"](start, formatter.date, true);
                e = end && dayjs__default["default"](end, formatter.date, true);
            }
            else {
                var start = applyValue[0], end = applyValue[1];
                s = dayjs__default["default"](start, formatter.date, true);
                e = dayjs__default["default"](end, formatter.date, true);
            }
        }
        else if (useObject()) {
            if (autoApply) {
                if (modelValue) {
                    var _a = Object.values(modelValue), start = _a[0], end = _a[1];
                    s = start && dayjs__default["default"](start, formatter.date, true);
                    e = end && dayjs__default["default"](end, formatter.date, true);
                }
            }
            else {
                var start = applyValue[0], end = applyValue[1];
                s = dayjs__default["default"](start, formatter.date, true);
                e = dayjs__default["default"](end, formatter.date, true);
            }
        }
        else if (autoApply) {
            var _b = (modelValue && typeof modelValue === 'string' ? modelValue.split(separator) : [false, false]), start = _b[0], end = _b[1];
            s = start && dayjs__default["default"](start, formatter.date, true);
            e = end && dayjs__default["default"](end, formatter.date, true);
        }
        else {
            var start = applyValue[0], end = applyValue[1];
            s = dayjs__default["default"](start, formatter.date, true);
            e = dayjs__default["default"](end, formatter.date, true);
        }
        if (s && e) {
            return useBetweenRange(date, {
                previous: s,
                next: e,
            });
        }
        return false;
    };
    var datepickerClasses = function (date) {
        var today = date.today, active = date.active, off = date.off, disabled = date.disabled;
        var classes = {
            class: '',
            css: undefined,
        };
        var s;
        var e;
        if (asRange()) {
            if (Array.isArray(modelValue)) {
                if (selection) {
                    var start = hoverValue[0], end = hoverValue[1];
                    s = start && dayjs__default["default"](start, formatter.date, true);
                    e = end && dayjs__default["default"](end, formatter.date, true);
                }
                else if (autoApply) {
                    var start = modelValue[0], end = modelValue[1];
                    s = start && dayjs__default["default"](start, formatter.date, true);
                    e = end && dayjs__default["default"](end, formatter.date, true);
                }
                else {
                    var start = applyValue[0], end = applyValue[1];
                    s = start && dayjs__default["default"](start, formatter.date, true);
                    e = end && dayjs__default["default"](end, formatter.date, true);
                }
            }
            else if (useObject()) {
                if (selection) {
                    var _a = hoverValue, start = _a[0], end = _a[1];
                    s = start && dayjs__default["default"](start, formatter.date, true);
                    e = end && dayjs__default["default"](end, formatter.date, true);
                }
                else if (autoApply) {
                    var _b = modelValue ? Object.values(modelValue) : [false, false], start = _b[0], end = _b[1];
                    s = start && dayjs__default["default"](start, formatter.date, true);
                    e = end && dayjs__default["default"](end, formatter.date, true);
                }
                else {
                    var start = applyValue[0], end = applyValue[1];
                    s = start && dayjs__default["default"](start, formatter.date, true);
                    e = end && dayjs__default["default"](end, formatter.date, true);
                }
            }
            else if (selection) {
                var start = hoverValue[0], end = hoverValue[1];
                s = start && dayjs__default["default"](start, formatter.date, true);
                e = end && dayjs__default["default"](end, formatter.date, true);
            }
            else if (autoApply) {
                var _c = (modelValue && typeof modelValue === 'string' ? modelValue.split(separator) : [false, false]), start = _c[0], end = _c[1];
                s = start && dayjs__default["default"](start, formatter.date, true);
                e = end && dayjs__default["default"](end, formatter.date, true);
            }
            else {
                var start = applyValue[0], end = applyValue[1];
                s = start && dayjs__default["default"](start, formatter.date, true);
                e = end && dayjs__default["default"](end, formatter.date, true);
            }
        }
        else if (Array.isArray(modelValue)) {
            if (autoApply) {
                if (modelValue.length > 0) {
                    var start = modelValue[0];
                    s = dayjs__default["default"](start, formatter.date, true);
                }
            }
            else {
                var start = applyValue[0];
                s = start && dayjs__default["default"](start, formatter.date, true);
            }
        }
        else if (useObject()) {
            if (autoApply) {
                if (modelValue) {
                    var start = Object.values(modelValue)[0];
                    s = dayjs__default["default"](start, formatter.date, true);
                }
            }
            else {
                var start = applyValue[0];
                s = start && dayjs__default["default"](start, formatter.date, true);
            }
        }
        else if (autoApply) {
            if (modelValue && typeof modelValue === 'string') {
                var start = modelValue.split(separator)[0];
                s = dayjs__default["default"](start, formatter.date, true);
            }
        }
        else {
            var start = applyValue[0];
            s = start && dayjs__default["default"](start, formatter.date, true);
        }
        if (active) {
            classes = today
                ? {
                    class: "text-litepie-primary-500 font-semibold dark:text-litepie-primary-400 rounded-full",
                    css: { color: selectionColor.ends.text },
                }
                : disabled
                    ? {
                        class: "text-litepie-secondary-600 font-normal disabled:text-litepie-secondary-500 disabled:cursor-not-allowed rounded-full",
                        css: undefined,
                    }
                    : date.isBetween(s, e, 'date', '()')
                        ? {
                            class: "text-litepie-secondary-700 font-medium dark:text-litepie-secondary-100 rounded-full",
                            css: undefined,
                        }
                        : {
                            class: "text-litepie-secondary-600 font-medium dark:text-litepie-secondary-200 rounded-full",
                            css: undefined,
                        };
        }
        if (off) {
            classes = {
                class: "text-litepie-secondary-400 font-light disabled:cursor-not-allowed",
                css: undefined,
            };
        }
        if (s && e && !off) {
            if (date.isSame(s, 'date')) {
                classes = e.isAfter(s, 'date')
                    ? {
                        class: 'bg-litepie-primary-500 text-white font-bold rounded-l-full disabled:cursor-not-allowed',
                        css: {
                            backgroundColor: selectionColor.ends.background,
                            color: selectionColor.ends.text,
                        },
                    }
                    : {
                        class: 'bg-litepie-primary-500 text-white font-bold rounded-r-full disabled:cursor-not-allowed',
                        css: {
                            backgroundColor: selectionColor.ends.background,
                            color: selectionColor.ends.text,
                        },
                    };
                if (s.isSame(e, 'date')) {
                    classes = {
                        class: "bg-litepie-primary-500 text-white font-bold rounded-full disabled:cursor-not-allowed",
                        css: {
                            backgroundColor: selectionColor.ends.background,
                            color: selectionColor.ends.text,
                        },
                    };
                }
            }
            if (date.isSame(e, 'date')) {
                classes = e.isAfter(s, 'date')
                    ? {
                        class: 'bg-litepie-primary-500 text-white font-bold rounded-r-full disabled:cursor-not-allowed',
                        css: {
                            backgroundColor: selectionColor.ends.background,
                            color: selectionColor.ends.text,
                        },
                    }
                    : {
                        class: 'bg-litepie-primary-500 text-white font-bold rounded-l-full disabled:cursor-not-allowed',
                        css: {
                            backgroundColor: selectionColor.ends.background,
                            color: selectionColor.ends.text,
                        },
                    };
                if (s.isSame(e, 'date')) {
                    classes = {
                        class: "bg-litepie-primary-500 text-white font-bold rounded-full disabled:cursor-not-allowed",
                        css: {
                            backgroundColor: selectionColor.ends.background,
                            color: selectionColor.ends.text,
                        },
                    };
                }
            }
        }
        else if (s) {
            if (date.isSame(s, 'date') && !off) {
                classes = {
                    class: "bg-litepie-primary-500 text-white font-bold rounded-full disabled:cursor-not-allowed",
                    css: {
                        backgroundColor: selectionColor.ends.background,
                        color: selectionColor.ends.text,
                    },
                };
            }
        }
        return classes;
    };
    var betweenRangeClasses = function (date) {
        var classes;
        var s;
        var e;
        classes = '';
        if (!asRange())
            return classes;
        if (Array.isArray(modelValue)) {
            if (hoverValue.length > 1) {
                var start = hoverValue[0], end = hoverValue[1];
                s = start && dayjs__default["default"](start, formatter.date, true);
                e = end && dayjs__default["default"](end, formatter.date, true);
            }
            else if (autoApply) {
                var start = modelValue[0], end = modelValue[1];
                s = start && dayjs__default["default"](start, formatter.date, true);
                e = end && dayjs__default["default"](end, formatter.date, true);
            }
            else {
                var start = applyValue[0], end = applyValue[1];
                s = start && dayjs__default["default"](start, formatter.date, true);
                e = end && dayjs__default["default"](end, formatter.date, true);
            }
        }
        else if (useObject()) {
            if (hoverValue.length > 1) {
                var start = hoverValue[0], end = hoverValue[1];
                s = start && dayjs__default["default"](start, formatter.date, true);
                e = end && dayjs__default["default"](end, formatter.date, true);
            }
            else if (autoApply) {
                if (modelValue) {
                    var _a = Object.values(modelValue), start = _a[0], end = _a[1];
                    s = start && dayjs__default["default"](start, formatter.date, true);
                    e = end && dayjs__default["default"](end, formatter.date, true);
                }
            }
            else {
                var start = applyValue[0], end = applyValue[1];
                s = start && dayjs__default["default"](start, formatter.date, true);
                e = end && dayjs__default["default"](end, formatter.date, true);
            }
        }
        else if (hoverValue.length > 1) {
            var start = hoverValue[0], end = hoverValue[1];
            s = start && dayjs__default["default"](start, formatter.date, true);
            e = end && dayjs__default["default"](end, formatter.date, true);
        }
        else if (autoApply) {
            var _b = (modelValue && typeof modelValue === 'string' ? modelValue.split(separator) : [false, false]), start = _b[0], end = _b[1];
            s = start && dayjs__default["default"](start, formatter.date, true);
            e = end && dayjs__default["default"](end, formatter.date, true);
        }
        else {
            var start = applyValue[0], end = applyValue[1];
            s = start && dayjs__default["default"](start, formatter.date, true);
            e = end && dayjs__default["default"](end, formatter.date, true);
        }
        if (s && e) {
            if (date.isSame(s, 'date')) {
                if (e.isBefore(s)) {
                    classes += " rounded-r-full inset-0";
                }
                if (s.isBefore(e)) {
                    classes += " rounded-l-full inset-0";
                }
            }
            else if (date.isSame(e, 'date')) {
                if (e.isBefore(s)) {
                    classes += " rounded-l-full inset-0";
                }
                if (s.isBefore(e)) {
                    classes += " rounded-r-full inset-0";
                }
            }
            else {
                classes += " inset-0";
            }
        }
        return classes;
    };
    var forceEmit = function (s, e) {
        var prevVal = dayjs__default["default"](s, formatter.date, true);
        var nextVal = dayjs__default["default"](e, formatter.date, true);
        datePickerDispatch({
            type: 'multiple',
            payload: {
                previous: prevVal,
                next: nextVal,
            },
        });
        if (dayjs__default["default"].duration(nextVal.diff(prevVal)).months() === 2 ||
            (dayjs__default["default"].duration(nextVal.diff(prevVal)).months() === 1 && dayjs__default["default"].duration(nextVal.diff(prevVal)).days() === 7)) {
            nextVal = nextVal.subtract(1, 'month');
            datePickerDispatch({
                type: 'change',
                payload: {
                    key: 'next',
                    value: nextVal,
                },
            });
        }
        if (nextVal.isSame(prevVal, 'month') || nextVal.isBefore(prevVal)) {
            prevVal = prevVal.add(1, 'month');
            datePickerDispatch({
                type: 'change',
                payload: {
                    key: 'next',
                    value: prevVal,
                },
            });
        }
    };
    var emitShortcut = function (s, e) {
        if (asRange()) {
            if (autoApply) {
                if (Array.isArray(modelValue)) {
                    setModelValue([s, e]);
                }
                else if (useObject()) {
                    var obj = {};
                    var _a = Object.keys(modelValue), start = _a[0], end = _a[1];
                    obj[start] = s;
                    obj[end] = e;
                    setModelValue(obj);
                }
                else {
                    setModelValue(useToValueFromArray({
                        previous: s,
                        next: e,
                    }, { formatter: formatter, separator: separator }));
                }
                setPickerValue("".concat(s).concat(separator).concat(e));
            }
            else {
                setApplyValue([dayjs__default["default"](s, formatter.date, true), dayjs__default["default"](e, formatter.date, true)]);
            }
        }
        else if (autoApply) {
            if (Array.isArray(modelValue)) {
                setModelValue([s]);
            }
            else if (useObject()) {
                var obj = {};
                var start = Object.keys(modelValue)[0];
                obj[start] = s;
                setModelValue(obj);
            }
            else {
                setModelValue(s);
            }
            setPickerValue(s);
        }
        else {
            setApplyValue([dayjs__default["default"](s, formatter.date, true), dayjs__default["default"](e, formatter.date, true)]);
        }
        forceEmit(s, e);
    };
    var setToToday = function () {
        var s = dayjs__default["default"]().format(formatter.date);
        var e = dayjs__default["default"]().format(formatter.date);
        emitShortcut(s, e);
    };
    var setToYesterday = function () {
        var s = dayjs__default["default"]().subtract(1, 'day').format(formatter.date);
        var e = dayjs__default["default"]().subtract(1, 'day').format(formatter.date);
        emitShortcut(s, e);
    };
    var setToLastDay = function (day) {
        var s = dayjs__default["default"]()
            .subtract(day - 1, 'day')
            .format(formatter.date);
        var e = dayjs__default["default"]().format(formatter.date);
        emitShortcut(s, e);
    };
    var setToThisMonth = function () {
        var s = dayjs__default["default"]().date(1).format(formatter.date);
        var e = dayjs__default["default"]().date(dayjs__default["default"]().daysInMonth()).format(formatter.date);
        emitShortcut(s, e);
    };
    var setToLastMonth = function () {
        var s = dayjs__default["default"]().date(1).subtract(1, 'month').format(formatter.date);
        var e = dayjs__default["default"]().date(0).format(formatter.date);
        emitShortcut(s, e);
    };
    React__default["default"].useEffect(function () {
        if (show)
            setPlacement(useVisibleViewport(LitepieRef.current));
    }, [show]);
    React__default["default"].useEffect(function () {
        if (applyValue.length > 0) {
            panelDispatch({
                type: 'multiple',
                payload: {
                    previous: {
                        year: false,
                        month: false,
                        calendar: true,
                    },
                    next: {
                        year: false,
                        month: false,
                        calendar: true,
                    },
                },
            });
            onChange(applyValue);
        }
    }, [applyValue]);
    React__default["default"].useEffect(function () {
        var s;
        var e;
        if (asRange()) {
            if (Array.isArray(modelValue)) {
                if (modelValue.length > 0) {
                    var start = modelValue[0], end = modelValue[1];
                    s = dayjs__default["default"](start, formatter.date, true);
                    e = dayjs__default["default"](end, formatter.date, true);
                }
            }
            else if (useObject()) {
                if (Object.keys(modelValue) && Object.keys(modelValue).length > 0) {
                    try {
                        console.log(Object.keys(modelValue));
                    }
                    catch (error) {
                        console.warn('[Litepie Datepicker]: It looks like you want to use Object as the argument %cv-model', 'font-style: italic; color: #42b883;', ', but you pass it undefined or null.');
                        console.warn("[Litepie Datepicker]: We has replace with %c{ startDate: '', endDate: '' }", 'font-style: italic; color: #42b883;', ', but you can replace manually.');
                        setModelValue({
                            startDate: '',
                            endDate: '',
                        });
                    }
                }
                if (modelValue) {
                    var _a = Object.values(modelValue), start = _a[0], end = _a[1];
                    s = start && dayjs__default["default"](start, formatter.date, true);
                    e = end && dayjs__default["default"](end, formatter.date, true);
                }
            }
            else if (modelValue) {
                var _b = modelValue.split(separator), start = _b[0], end = _b[1];
                s = dayjs__default["default"](start, formatter.date, true);
                e = dayjs__default["default"](end, formatter.date, true);
            }
            if (s && e) {
                setPickerValue(useToValueFromArray({
                    previous: s,
                    next: e,
                }, { formatter: formatter, separator: separator }));
                if (e.isBefore(s, 'month')) {
                    datePickerDispatch({
                        type: 'multiple',
                        payload: {
                            previous: e,
                            next: s,
                            year: { previous: e.year(), next: s.year() },
                        },
                    });
                }
                else if (e.isSame(s, 'month')) {
                    datePickerDispatch({
                        type: 'multiple',
                        payload: {
                            previous: s,
                            next: e.add(1, 'month'),
                            year: { previous: s.year(), next: s.add(1, 'year').year() },
                        },
                    });
                }
                else {
                    datePickerDispatch({
                        type: 'multiple',
                        payload: {
                            previous: s,
                            next: e,
                            year: { previous: s.year(), next: e.year() },
                        },
                    });
                }
                if (!autoApply) {
                    setApplyValue([s, e]);
                }
            }
            else {
                datePickerDispatch({
                    type: 'multiple',
                    payload: {
                        previous: dayjs__default["default"](startFrom),
                        next: dayjs__default["default"](startFrom).add(1, 'month'),
                        year: {
                            previous: datepicker.previous.year(),
                            next: datepicker.next.year(),
                        },
                    },
                });
            }
        }
        else {
            if (Array.isArray(modelValue)) {
                if (modelValue.length > 0) {
                    var start = modelValue[0];
                    s = dayjs__default["default"](start, formatter.date, true);
                }
            }
            else if (useObject()) {
                if (modelValue) {
                    var start = Object.values(modelValue)[0];
                    s = dayjs__default["default"](start, formatter.date, true);
                }
            }
            else if (modelValue.length) {
                var start = modelValue.split(separator)[0];
                s = dayjs__default["default"](start, formatter.date, true);
            }
            if (s && s.isValid()) {
                setPickerValue(useToValueFromString(s, { formatter: formatter }));
                datePickerDispatch({
                    type: 'multiple',
                    payload: {
                        previous: s,
                        next: s.add(1, 'month'),
                        year: { previous: s.year(), next: s.add(1, 'year').year() },
                    },
                });
                if (!autoApply) {
                    setApplyValue([s]);
                }
            }
            else {
                datePickerDispatch({
                    type: 'multiple',
                    payload: {
                        previous: dayjs__default["default"](startFrom),
                        next: dayjs__default["default"](startFrom).add(1, 'month'),
                        year: {
                            previous: datepicker.previous.year(),
                            next: datepicker.next.year(),
                        },
                    },
                });
            }
        }
        datePickerDispatch({
            type: 'multiple',
            payload: {
                weeks: dayjs__default["default"].weekdaysShort(),
                months: formatter.month === 'MMM' ? dayjs__default["default"].monthsShort() : dayjs__default["default"].months(),
            },
        });
        document.addEventListener('click', function (event) {
            if (Litepiedatepicker &&
                Litepiedatepicker.current &&
                !Litepiedatepicker.current.contains(event.target)) {
                setShow(false);
            }
        }, true);
    }, []);
    return (React__default["default"].createElement("div", { id: "litepie", ref: Litepiedatepicker, className: "".concat(dark ? 'dark ' : '', "relative ").concat(overlay ? ' litepie-datepicker-overlay' : '').concat(show && overlay ? ' open' : '') },
        React__default["default"].createElement("button", { ref: LitepieButtonRef, type: "button", className: "flex items-center justify-center flex-none py-3 space-x-2 font-mono text-xs font-semibold leading-6 text-gray-400 transition duration-300 ease-out border border-gray-200 sm:w-auto sm:text-base bg-gray-50 hover:text-gray-900 sm:px-6 rounded-xl sm:space-x-4 focus:ring-2 focus:ring-offset-2 focus:ring-offset-black focus:ring-gray-300 focus:outline-none", onClick: function () { return setShow(!show); } },
            CalenderIcon,
            React__default["default"].createElement("span", { className: "text-gray-900" }, pickerValue)),
        show && (React__default["default"].createElement(reactTransitionGroup.CSSTransition, { timeout: 5000, classnames: {
                enter: 'translate-y-3 opacity-0',
                enterDone: 'translate-y-0 opacity-100',
                enterActive: 'transition duration-200 ease-out transform',
                exit: 'transition duration-150 ease-in transform',
                exitDone: 'translate-y-0 opacity-100',
                exitActive: 'translate-y-3 opacity-0',
            } },
            React__default["default"].createElement("div", { ref: LitepieRef, className: "absolute z-50 top-full sm:mt-2.5 ".concat(placement ? 'left-0 right-auto' : 'left-auto right-0') },
                React__default["default"].createElement("div", { className: "fixed inset-0 z-50 overflow-y-auto bg-white shadow-sm sm:overflow-visible sm:static sm:z-auto dark:bg-litepie-secondary-800 sm:rounded-lg" },
                    React__default["default"].createElement("div", { className: "litepie-datepicker static sm:relative w-full bg-white sm:rounded-lg sm:shadow-sm border-0 sm:border border-black border-opacity-10 px-3 py-3 sm:px-1 sm:py-1.5 dark:bg-litepie-secondary-800 dark:border-litepie-secondary-700 dark:border-opacity-100 ".concat(placement ? 'place-left' : 'place-right') },
                        React__default["default"].createElement("div", { className: "flex flex-wrap lg:flex-nowrap" },
                            shortcuts && asRange && !asSingle && (React__default["default"].createElement(Shortcut
                            // setToCustomShortcut={setToCustomShortcut}
                            , { 
                                // setToCustomShortcut={setToCustomShortcut}
                                setToday: setToToday, setToYesterday: setToYesterday, setToLastDay: setToLastDay, setToThisMonth: setToThisMonth, setToLastMonth: setToLastMonth })),
                            React__default["default"].createElement("div", { className: "relative flex flex-wrap p-1 sm:flex-nowrap" },
                                asRange() && !asSingle && (React__default["default"].createElement(React__default["default"].Fragment, null,
                                    React__default["default"].createElement("div", { className: "absolute inset-0 items-center justify-center hidden sm:flex" },
                                        React__default["default"].createElement("div", { className: "w-8 h-1 shadow-inner sm:w-1 sm:h-8 bg-litepie-primary-500 rounded-xl" })),
                                    React__default["default"].createElement("div", { className: "relative w-full sm:w-80".concat(asRange() && !asSingle ? ' mb-3 sm:mb-0 sm:mr-2' : '') },
                                        React__default["default"].createElement(Header, { panel: panel.previous, calendar: calendar.previous, Icons: HeaderIcons }),
                                        React__default["default"].createElement("div", { className: "px-0.5 sm:px-2" },
                                            panel.previous.month && (React__default["default"].createElement(Month, { months: months(), updateMonth: calendar.previous.setMonth })),
                                            panel.previous.year && (React__default["default"].createElement(Year, { years: calendar.previous.years(), updateYear: calendar.previous.setYear, asPrevOrNext: false })),
                                            panel.previous.calendar && (React__default["default"].createElement("div", null,
                                                React__default["default"].createElement(Week, { weeks: dayjs__default["default"].weekdaysShort() }),
                                                React__default["default"].createElement(Calender, { isBetweenRange: isBetweenRange, betweenRangeClasses: betweenRangeClasses, atMouseOver: atMouseOver, datepickerClasses: datepickerClasses, calendar: calendar.previous, asRange: asRange(), asPrevOrNext: true, updateDate: setDate, selectionColor: selectionColor.selection }))))))),
                                asRange() && !asSingle && (React__default["default"].createElement("div", { className: "relative w-full mt-3 overflow-hidden sm:w-80 sm:mt-0 sm:ml-2" },
                                    React__default["default"].createElement(Header, { panel: panel.next, calendar: calendar.next, Icons: HeaderIcons }),
                                    React__default["default"].createElement("div", { className: "px-0.5 sm:px-2" },
                                        panel.next.month && React__default["default"].createElement(Month, { months: months(), updateMonth: calendar.next.setMonth }),
                                        panel.next.year && (React__default["default"].createElement(Year, { years: calendar.next.years(), updateYear: calendar.next.setYear, asPrevOrNext: true })),
                                        panel.next.calendar && (React__default["default"].createElement("div", null,
                                            React__default["default"].createElement(Week, { weeks: weeks() }),
                                            React__default["default"].createElement(Calender, { isBetweenRange: isBetweenRange, betweenRangeClasses: betweenRangeClasses, atMouseOver: atMouseOver, datepickerClasses: datepickerClasses, calendar: calendar.next, asRange: asRange(), asPrevOrNext: true, updateDate: setDate, selectionColor: selectionColor.selection })))))))),
                        !autoApply ? (React__default["default"].createElement("div", null,
                            React__default["default"].createElement("div", { className: "mt-2 mx-2 py-1.5 border-t border-black border-opacity-10 dark:border-litepie-secondary-700 dark:border-opacity-100" },
                                React__default["default"].createElement("div", { className: "mt-1.5 sm:flex sm:flex-row-reverse" },
                                    React__default["default"].createElement("button", { type: "button", className: "inline-flex justify-center w-full px-4 py-2 text-base font-medium text-white transition duration-300 ease-out border border-transparent rounded-md shadow-sm away-apply-picker bg-litepie-primary-600 hover:bg-litepie-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-litepie-primary-500 sm:ml-3 sm:w-auto sm:text-sm dark:ring-offset-litepie-secondary-800 disabled:cursor-not-allowed", disabled: asSingle ? applyValue.length < 1 : applyValue.length < 2, style: styles === null || styles === void 0 ? void 0 : styles.apply, onClick: applyDate }, options.footer.apply),
                                    React__default["default"].createElement("button", { type: "button", className: "inline-flex justify-center w-full px-4 py-2 mt-3 text-base font-medium transition duration-300 ease-out bg-white border rounded-md shadow-sm away-cancel-picker border-litepie-secondary-300 text-litepie-secondary-700 hover:bg-litepie-secondary-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-litepie-primary-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm dark:ring-offset-litepie-secondary-800", onClick: function () {
                                            setShow(false);
                                        }, style: styles === null || styles === void 0 ? void 0 : styles.cancel }, options.footer.cancel))))) : (React__default["default"].createElement("div", { className: "sm:hidden" },
                            React__default["default"].createElement("div", { className: "mt-2 mx-2 py-1.5 border-t border-black border-opacity-10 dark:border-litepie-secondary-700 dark:border-opacity-100" },
                                React__default["default"].createElement("div", { className: "mt-1.5 sm:flex sm:flex-row-reverse" },
                                    React__default["default"].createElement("button", { type: "button", className: "inline-flex justify-center w-full px-4 py-2 text-base font-medium transition duration-300 ease-out bg-white border rounded-md shadow-sm away-cancel-picker border-litepie-secondary-300 text-litepie-secondary-700 hover:bg-litepie-secondary-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-litepie-primary-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm dark:ring-offset-litepie-secondary-800", style: styles === null || styles === void 0 ? void 0 : styles.cancel }, options.footer.cancel))))))))))));
};

exports["default"] = Datepicker;
//# sourceMappingURL=index.js.map
